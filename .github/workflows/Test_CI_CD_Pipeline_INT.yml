# This workflows triggers the build/deploy workflow for every repository. 

name: Test - CI/CD Pipeline INT 

on: 
#   schedule: 
#     - cron: '*/5 * * * *' # Every 5 minutes
  workflow_dispatch: 
    inputs: 
      environment: 
        description: 'Environment' 
        required: true 
        type: choice 
        options: 
          - 'INT'

jobs:
    # Checkout the repository 
    Checkout:
        runs-on: ZLENOVO_1
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
              
    # Trigger Build/Deploy for Aphrodite
    CoreLearner:
        runs-on: ZLENOVO_1
        if: always() # Ensure this job runs even if the previous jobs fail
        needs: [Checkout] # Ensure this job runs after the Checkout job
        outputs:
            BUILD_STATUS_CORELEARNER: ${{ steps.get_build_status_corelearner.outputs.buildStatusCoreLearner }}
        steps:
            - name: Trigger Build/Deploy Workflow for Aphrodite
              id: trigger_workflow_corelearner
              run: |
                echo ${{ github.workspace }}
                $PSVersionTable.PSVersion
                # Assuming you chose runner-one earlier
                $environmentInput = 'INT-ZLENOVO_1'
                echo "PS Version: $PSVersionTable.PSVersion"
                cd ${{ github.workspace }}\Scripts

                .\Trigger_WorkFlow_From_GitHub_API.ps1 -repo_name 'CoreLearner' -environment $environmentInput -pat_token '${{ secrets.PAT_TOKEN }}'

            - name: Capture Build Status for CoreLearner
              id: get_build_status_corelearner
              run: |
                $buildStatusCoreLearner = '${{ job.status}}'
                echo "Build Status for CoreLearner: $buildStatusCoreLearner"
                echo "buildStatusCoreLearner=$buildStatusCoreLearner" >> $env:GITHUB_OUTPUT 

    DemoNotCore:
        runs-on: ZLENOVO_1
        if: always() # Ensure this job runs even if the previous jobs fail
        needs: [Checkout, CoreLearner] # Ensure this job runs after the Checkout job
        outputs:
             BUILD_STATUS_DEMONOTCORE: ${{ steps.get_build_status_demonotcore.outputs.buildStatusDemoNotCore }}
        steps:
            - name: Trigger Build/Deploy Workflow for Aphrodite
              id: trigger_workflow_demonotcore
              run: |
                # Assuming you chose runner-one earlier
                $environmentInput = 'INT-ZLENOVO_1'
                cd ${{ github.workspace }}\Scripts
                .\Trigger_WorkFlow_From_GitHub_API.ps1 -repo_name 'DemoNotCore' -environment $environmentInput -pat_token '${{ secrets.PAT_TOKEN }}'

            - name: Capture Build Status for DemoNotCore
              id: get_build_status_demonotcore
              run: |
                $buildStatusDemoNotCore = '${{ job.status}}'
                echo "Build Status for DemoNotCore: $buildStatusDemoNotCore"
                echo "buildStatusDemoNotCore=$buildStatusDemoNotCore" >> $env:GITHUB_OUTPUT 


    # Trigger Build/Deploy for ClientWebREST_API
    # ClientWebREST_API:
    #     runs-on: self-hosted
    #     needs: [Aphrodite] # Ensure this job runs after all previous jobs
    #     if: always() # Ensure this job runs even if the previous jobs fail
    #     outputs:
    #         BUILD_STATUS_CLIENTWEBREST_API: ${{ steps.get_build_status_clientwebrest_api.outputs.buildStatusClientWebREST_API }}
    #     steps:
    #         - name: Trigger Build and Deploy Workflow for ClientWebREST_API
    #           uses: actions/github-script@v7
    #           with:
    #             script: |
    #               const response = await github.rest.actions.createWorkflowDispatch({
    #                 owner: context.repo.owner,
    #                 repo: context.repo.repo,
    #                 workflow_id: 'Build_Deploy_Env_GitHub.yml',
    #                 ref: 'main',
    #                 inputs: {
    #                   repo_name: 'CW.ClientWebREST_API',
    #                   environment: 'INT'
    #                 }
    #               });
    #               console.log(response);
            
    #         - name: Capture Build Status for ClientWebREST_API
    #           id: get_build_status_clientwebrest_api 
    #           run: |
    #             $buildStatusClientWebREST_API = '${{ job.status}}'
    #             echo "Build Status for ClientWebREST_API: $buildStatusClientWebREST_API"
    #             echo "buildStatusClientWebREST_API=$buildStatusClientWebREST_API" >> $env:GITHUB_OUTPUT 
    
   
    # Aggregate Build Statuses 
    Aggregate_Build_Statuses:
        runs-on: ZLENOVO_1
        needs: [CoreLearner, DemoNotCore] # Ensure this job runs after all previous jobs
        if: always() # Ensure this job runs even if previous jobs fail
        steps:
            - name: Aggregate Build Statuses
              run: |
                echo "CoreLearner Build Status: ${{ needs.CoreLearner.outputs.BUILD_STATUS_CORELEARNER }}"
                echo "DemoNotCore Build Status: ${{ needs.DemoNotCore.outputs.BUILD_STATUS_DEMONOTCORE }}"
                # You can add logic here to handle the aggregated statuses as needed.

    # Email Notification 
    # Email_Notification:
    #     runs-on: self-hosted
    #     needs: [Checkout, Aphrodite, ClientWebREST_API] # Ensure this job runs after all previous jobs
    #     if: always() # Ensure this job runs even if previous jobs fail
    #     steps:
    #         - name: Send Email Notification
    #           shell: powershell 
    #           run: | 
    #             $statusSummary = "
    #             Aphrodite: ${{ needs.Aphrodite.outputs.BUILD_STATUS_APHRODITE }}

    #             ClientWebREST_API: ${{ needs.ClientWebREST_API.outputs.BUILD_STATUS_CLIENTWEBREST_API }}
            
    #             " 
    #             $smtpServer = "x2.eduneering.com" 
    #             $smtpFrom = "rootdrop@eduneering.com" 
    #             $smtpTo = "zeeshan.yousaf@ul.com" 
    #             $smtpPort = "25" 
    #             $subject = "INT - CI/CD" 
    #             $body = @" 

    #             INT CI/CD Pipeline has been completed. 

    #             Summary: 

    #             $statusSummary 

    #             "@ 

    #             Send-MailMessage -SmtpServer $smtpServer -Port $smtpPort -From $smtpFrom -To $smtpTo -Subject $subject -Body $body 
