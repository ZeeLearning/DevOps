name: ZY_Test_Build_Deploy

on:
  workflow_dispatch:
    inputs:
        repo_name:
            description: 'Name of the Repository'
            required: true
            type: choice
            options:
                - 'CW.Aphrodite'
                - 'CW.Apollo'
                - 'CW.Athena'
                - 'CW.Chronos'
                - 'CW.Chronos-Admin'
                - 'CW.ClientWebREST_API'
                - 'CW.ComplianceWire-1.0'
                - 'CW.Admin'
                - 'CW.Learner'
                - 'CW.CWWebApi'
                - 'CW.CWWebApi-Router'
                - 'CW.Hyperion'
                - 'CW.PSTools'
                - 'CW.ReportEngine'
                - 'CW.Zeus'
                
        environment:
            description: 'Environment'
            required: true
            type: choice
            options:
                - 'INT'
                - 'INT2'
                - 'QAProd'
                - 'NewQA'
                - 'SprintQA'
                - 'LT'
                - 'Production'

# Define environment variables that can be used in the workflow. 
env:
    REPO_NAME: >-
      ${{
        github.event.inputs.repo_name =='CW.Chronos-Admin' && 'CW.Chronos' ||
        github.event.inputs.repo_name == 'CW.CWWebApi-Router' && 'CW.CWWebApi' ||
        github.event.inputs.repo_name
      }}
    REPO_URL: >-
      "https://${{ secrets.USER_NAME }}:${{ secrets.PAT_TOKEN }}@github.com/Underwriters-Labs/${{ 
        github.event.inputs.repo_name =='CW.Chronos-Admin' && 'CW.Chronos' ||
        github.event.inputs.repo_name == 'CW.CWWebApi-Router' && 'CW.CWWebApi' ||
        github.event.inputs.repo_name
      }}.git"
    WORKSPACE_DIRECTORY: ${{ github.workspace }}
    PLATFORM: 'Any CPU'
    PLATFORM_NOSPACE: 'AnyCPU'
    ATHENA_FOLDER_NAME: 'EN.Platform'
    CLIENTWEBREST_API_FOLDER_NAME: 'EN.Web'
    NUGET_SOURCE: "https://api.nuget.org/v3/index.json"
    OUTPUT_DIRECTORY: "\\\\CWStaging01\\Builds\\${{ github.event.inputs.repo_name}}\\${{ vars.BRANCH }}\\${{ vars.CONFIGURATION }}"
    CW_1_0_DROP_FOLDER: "\\\\CWStaging01\\Builds\\${{ github.event.inputs.repo_name }}\\${{ vars.DROP_FOLDER }}"
    ROBOCOPY_LOG_FOLDER: "\\\\CWStaging01\\Builds\\RoboCopy\\LogFiles\\${{ github.event.inputs.environment }}"

jobs:
    # Get the name of self-hosted runner 
    Get_Self_Hosted_Runner:
      runs-on: ${{ github.event.inputs.environment == 'Production' && 'CW_PROD' || 'CW_DOWNSTREAM' }}
      outputs:
        RUNNER_NAME: ${{ steps.get_runner_name.outputs.runner_name }}
      steps:
        - name: Get self-hosted runner name
          id: get_runner_name
          run: |
            echo "Runner Name: ${{ runner.name }}"
            echo "runner_name=${{ runner.name }}" >> $env:GITHUB_OUTPUT 
    # Clone and checkout the target repo
    Checkout_Target_Repo:
        runs-on: ${{ needs.Get_Self_Hosted_Runner.outputs.RUNNER_NAME }}
        needs: [Get_Self_Hosted_Runner]
        environment: ${{ github.event.inputs.environment }}
        # Set the output for the solution name
        outputs:
            SOLUTION_NAME: ${{ steps.get_solution_name.outputs.solutionName }}
            COMMIT_ID: ${{ steps.get_commit_info.outputs.commitHash }}
            COMMIT_MESSAGE: ${{ steps.get_commit_info.outputs.commitMessage }}
        steps:
            # Checkout the target repo
            - name: Check out the target repo 
              run: |
                git clone --branch ${{ vars.BRANCH }} ${{ env.REPO_URL}} ${{ env.REPO_NAME }}
                cd ${{ env.REPO_NAME }}
                echo "Cloned repository: ${{ env.REPO_NAME }} (branch: ${{ vars.BRANCH }})"
                git checkout ${{ vars.BRANCH }}
                echo "Checked out branch: ${{ vars.BRANCH }}"
                git branch
                echo ${{ env.WORKSPACE_DIRECTORY }}
            
            # Get solution file name 
            - name: Get solution file name
              id: get_solution_name
              run: |
                cd ${{ env.REPO_NAME }}
                $solution = Get-ChildItem -Path . -Filter *.sln -Recurse | Select-Object -First 1 
                if ($solution) { 
                    $solutionName = $solution.Name 
                    echo "Solution file name: $solutionName" 
                    echo "solutionName=$solutionName" >> $env:GITHUB_OUTPUT 
                } else { 
                    echo "No solution file found." 
                    exit 1 
                } 
            - name: Get Latest commit info 
              id: get_commit_info
              run: |
                cd ${{ env.REPO_NAME }}
                $latestCommitHash = git rev-parse HEAD
                $latestCommitMessage = git log -1 --pretty=%B
                echo "Latest Commit Hash: $latestCommitHash"
                echo "Latest Commit Message: $latestCommitMessage"
                echo "commitHash=$latestCommitHash" >> $env:GITHUB_OUTPUT
                echo "commitMessage=$latestCommitMessage" >> $env:GITHUB_OUTPUT
    # Restore NuGet packages
    NuGet_Restore:
        runs-on: ${{ needs.Get_Self_Hosted_Runner.outputs.RUNNER_NAME }}
        needs: [Get_Self_Hosted_Runner, Checkout_Target_Repo] 
        environment: ${{ github.event.inputs.environment }} 
        env: 
          SOLUTION_NAME: ${{ needs.Checkout_Target_Repo.outputs.SOLUTION_NAME }} 
        steps: 
            - name: Install NuGet  
              uses: NuGet/setup-nuget@v1 

            - name: Setup NuGet Source  
              run: |  
                if (nuget sources list | Select-String -Pattern "UL NuGet") { 
                  nuget source remove -name "UL NuGet" 
                } 
                nuget source add -name "UL NuGet" -source ${{ vars.UL_NUGET }} -username ${{ secrets.NUGET_USER }} -password ${{ secrets.NUGET_PASSWORD }} 

            # Restore NuGet packages based on project type 
            - name: Restore NuGet Packages 
              run: | 
                cd ${{ env.REPO_NAME }} 
                if ('${{ env.REPO_NAME }}' -eq 'CW.Learner') { 
                    dotnet restore CWLearner\CWLearner.csproj --source ${{ env.NUGET_SOURCE}}
                    dotnet --version
                } elseif ('${{ env.REPO_NAME }}' -eq 'CW.Admin') { 
                    dotnet restore CWAdmin\CWAdmin.csproj --source ${{ env.NUGET_SOURCE}}
                    dotnet --version
                } elseif ('${{ env.REPO_NAME }}' -eq 'CW.Athena') { 
                    nuget restore ${{ env.ATHENA_FOLDER_NAME }}\${{ env.SOLUTION_NAME }} -source "UL NuGet" 
                } elseif ('${{ env.REPO_NAME }}' -eq 'CW.ClientWebREST_API') { 
                    nuget restore ${{ env.CLIENTWEBREST_API_FOLDER_NAME }}\${{ env.SOLUTION_NAME }} -source "UL NuGet" 
                } elseif ('${{ env.REPO_NAME }}' -eq 'CW.ComplianceWire-1.0') {
                    echo "Skipping NuGet restore for CW.ComplianceWire-1.0"
                } else { 
                    nuget restore ${{ env.SOLUTION_NAME }} -source "UL NuGet" 
                } 

                echo "Configuration - ${{ vars.CONFIGURATION }}" 
    # Build and Deploy selected repository (project) 
    Build_Solution:
        runs-on: ${{ needs.Get_Self_Hosted_Runner.outputs.RUNNER_NAME }} 
        environment: ${{ github.event.inputs.environment }}
        needs: [Get_Self_Hosted_Runner, Checkout_Target_Repo, NuGet_Restore]
        env:
          SOLUTION_NAME: ${{ needs.Checkout_Target_Repo.outputs.SOLUTION_NAME }}
        steps:   
            # Install MSBuild 
            - name: Install MSBuild 
              uses: microsoft/setup-msbuild@v1

            # Aphrodite 
            - name: Build and Deploy Aphrodite
              if: ${{ env.REPO_NAME == 'CW.Aphrodite' }}
              run: |
                echo "Building solution: ${{ env.REPO_NAME }}\${{ env.SOLUTION_NAME}}"
                msbuild123 ${{ env.REPO_NAME }}\${{ env.SOLUTION_NAME }} /p:Configuration=${{ vars.CONFIGURATION }} /p:Platform="${{ env.PLATFORM }}" /p:MsDeployServiceUrl=${{ vars.WEB_SERVER }}.alpha.eduh.co:8172/msdeploy.axd /p:DeployIisAppPath="ComplianceWire/WebAPI" /p:DeployOnBuild=True /p:IsAutoBuild=True /p:DeployTarget=MsDeployPublish /p:CreatePackageOnPublish=True /p:AllowUntrustedCertificate=True /p:username="${{ vars.DEPLOY_USER }}" /p:password="${{ secrets.DEPLOY_PASSWORD }}" /p:OutDir="${{ env.OUTPUT_DIRECTORY }}"

            # Apollo
            - name: Build and Deploy Apollo
              if: ${{ env.REPO_NAME == 'CW.Apollo' }}
              run: |
                echo "Building solution: ${{ env.REPO_NAME }}\${{ env.SOLUTION_NAME}}"
                msbuild ${{ env.REPO_NAME }}\${{ env.SOLUTION_NAME }} /p:Configuration=${{ vars.CONFIGURATION }} /p:Platform="${{ env.PLATFORM }}" /p:MsDeployServiceUrl=${{ vars.WEB_SERVER }}.alpha.eduh.co:8172/msdeploy.axd /p:DeployIisAppPath="ComplianceWire/CW3" /p:DeployOnBuild=True /p:IsAutoBuild=True /p:DeployTarget=MsDeployPublish /p:CreatePackageOnPublish=True /p:AllowUntrustedCertificate=True /p:username="${{ vars.DEPLOY_USER }}" /p:password="${{ secrets.DEPLOY_PASSWORD }}" /p:OutDir="${{ env.OUTPUT_DIRECTORY }}"

            # Athena
            - name: Build and Deploy Athena 
              if: ${{ env.REPO_NAME == 'CW.Athena' }}
              run: |
                echo "Building solution: ${{ env.REPO_NAME }}\${{ env.ATHENA_FOLDER_NAME }}\${{ env.SOLUTION_NAME}}"
                msbuild ${{ env.REPO_NAME }}\${{ env.ATHENA_FOLDER_NAME }}\${{ env.SOLUTION_NAME}} /p:Configuration=${{ vars.CONFIGURATION }} /p:Platform="${{ env.PLATFORM_NOSPACE }}" /p:MsDeployServiceUrl=${{ vars.MT_SERVER }}.alpha.eduh.co:8172/msdeploy.axd /p:DeployOnBuild=True /p:IsAutoBuild=True /p:DeployTarget=MsDeployPublish /p:CreatePackageOnPublish=True /p:AllowUntrustedCertificate=True /p:username="${{ vars.DEPLOY_USER }}" /p:password="${{ secrets.DEPLOY_PASSWORD }}" /p:OutDir="${{ env.OUTPUT_DIRECTORY }}"

            # Chronos
            - name: Build and Deploy Chronos
              if: ${{ github.event.inputs.repo_name == 'CW.Chronos' }}
              run: |
                echo "Building solution: ${{ github.event.inputs.repo_name }}\${{ env.SOLUTION_NAME}}"
                msbuild ${{ env.REPO_NAME }}\${{ env.SOLUTION_NAME }} /p:Configuration=${{ vars.CONFIGURATION }} /p:Platform="${{ env.PLATFORM }}" /p:MsDeployServiceUrl=${{ vars.WEB_SERVER }}.alpha.eduh.co:8172/msdeploy.axd /p:DeployIisAppPath="ComplianceWire/CW2" /p:DeployOnBuild=True /p:IsAutoBuild=True /p:DeployTarget=MsDeployPublish /p:CreatePackageOnPublish=True /p:AllowUntrustedCertificate=True /p:username="${{ vars.DEPLOY_USER }}" /p:password="${{ secrets.DEPLOY_PASSWORD }}" /p:OutDir="${{ env.OUTPUT_DIRECTORY }}"

            # Chronos
            - name: Build and Deploy Chronos Admin
              if: ${{ github.event.inputs.repo_name == 'CW.Chronos-Admin' }}
              run: |
                echo "Building solution: ${{ github.event.inputs.repo_name }}\${{ env.SOLUTION_NAME}}"
                msbuild ${{ env.REPO_NAME }}\${{ env.SOLUTION_NAME }} /p:Configuration=${{ vars.CHRONOS_ADMIN }} /p:Platform="${{ env.PLATFORM }}" /p:MsDeployServiceUrl=${{ vars.WEB_SERVER }}.alpha.eduh.co:8172/msdeploy.axd /p:DeployIisAppPath="ComplianceWire/Admin" /p:DeployOnBuild=True /p:IsAutoBuild=True /p:DeployTarget=MsDeployPublish /p:CreatePackageOnPublish=True /p:AllowUntrustedCertificate=True /p:username="${{ vars.DEPLOY_USER }}" /p:password="${{ secrets.DEPLOY_PASSWORD }}" /p:OutDir="${{ env.OUTPUT_DIRECTORY }}"
                echo "Configuration - ${{ vars.CHRONOS_ADMIN }}"

            # ClientWebREST_API
            - name: Build and Deploy ClientWebREST_API
              if: ${{ env.REPO_NAME == 'CW.ClientWebREST_API' }}
              run: |
                echo "Building solution: ${{ env.REPO_NAME }}\${{ env.CLIENTWEBREST_API_FOLDER_NAME }}\${{ env.SOLUTION_NAME}}"
                msbuild ${{ env.REPO_NAME }}\${{ env.CLIENTWEBREST_API_FOLDER_NAME }}\${{ env.SOLUTION_NAME}} /p:Configuration=${{ vars.CONFIGURATION }} /p:Platform="${{ env.PLATFORM }}" /p:MsDeployServiceUrl=${{ vars.WEB_SERVER }}.alpha.eduh.co:8172/msdeploy.axd /p:DeployIisAppPath="RESTAPI" /p:DeployOnBuild=True /p:IsAutoBuild=True /p:DeployTarget=MsDeployPublish /p:CreatePackageOnPublish=True /p:AllowUntrustedCertificate=True /p:username="${{ vars.DEPLOY_USER }}" /p:password="${{ secrets.DEPLOY_PASSWORD }}" /p:OutDir="${{ env.OUTPUT_DIRECTORY }}"

            # ComplianceWire-1.0
            - name: Build and Deploy ComplianceWire-1.0
              if: ${{ env.REPO_NAME == 'CW.ComplianceWire-1.0' }}
              run: |
                echo "Building project file: ${{ env.REPO_NAME }}\ComplianceWrieAP\ComplianceWire.csproj"
                msbuild ${{ env.REPO_NAME }}\ComplianceWireAP\ComplianceWire.csproj /p:Configuration=Release /p:Platform="${{ env.PLATFORM_NOSPACE }}" /p:TransformConfigFiles=true /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:OutDir="${{ env.CW_1_0_DROP_FOLDER }}"

            - name: Run Robocopy after Successful Build for INT 
              if: success() && env.REPO_NAME == 'CW.ComplianceWire-1.0' && github.event.inputs.environment == 'INT' 
              run: | 
                echo "Running robocopy for INT environment..." 
                robocopy "${{ env.CW_1_0_DROP_FOLDER }}\_PublishedWebsites\ComplianceWire" "\\${{ vars.WEB_SERVER }}\Eduneering\Compliancewire" /E /MT:16 /XF *.asa *.asax *.asax.cs *.config *.cfg Infragistics*.xml *.lic DomainEntry.xml ESCrypt.dll ICSharpCode.SharpZipLib.dll KaplanIntegration.dll log4net.dll Newtonsoft.Json.dll RusticiSoftware.ScormEngine.dll AdobeConnectCOMSDK.dll /XD DfsrPrivate Modules Presentations VisualJobAids Courses Exams flash_courses Hip3Courses Magazine narration Policies ScormEngine DocMinder CreatePlayer /LOG:"${{ env.ROBOCOPY_LOG_FOLDER }}\CW1.txt" 
                
                #robocopy "\\${{ env.WEB_SERVER }}\c$\TestPage" "\\${{ env.WEB_SERVER }}\EduNeering\ComplianceWire\Secure"

                #robocopy "\\CWStaging01\Builds\RoboCopy\INT\EDMSTestPages" "\\${{ env.WEB_SERVER }}\Eduneering\Compliancewire\Posts"

                $EXIT_CODE = $LASTEXITCODE
                if ( $EXIT_CODE -le 3 ){
                  echo "Robocopy completed with exit code $EXIT_CODE (Success or minor issues)."
                  exit 0 # Force a successful exit for GitHub Actions 
                }
                else {
                  echo "Robocopy failed with exit code $EXIT_CODE." 
                  exit $EXIT_CODE 
                }                
              
            - name: Run Robocopy after Successful Build for all other environments
              if: success() && env.REPO_NAME == 'CW.ComplianceWire-1.0' && github.event.inputs.environment != 'INT' 
              run: | 
                echo "Running robocopy for ${{ github.event.inputs.environment }} environment..." 
                robocopy "${{ env.CW_1_0_DROP_FOLDER }}\_PublishedWebsites\ComplianceWire" "\\${{ vars.WEB_SERVER }}\Eduneering\Compliancewire" /E  /MT:16 /XF *.asa *.asax *.asax.cs *.config *.cfg Infragistics*.xml *.lic DomainEntry.xml ESCrypt.dll KECryptography.dll ICSharpCode.SharpZipLib.dll KaplanIntegration.dll  log4net.dll Newtonsoft.Json.dll RusticiSoftware.ScormEngine.dll /XD DfsrPrivate Modules Presentations VisualJobAids Courses Exams flash_courses Hip3Courses Magazine narration Policies ScormEngine DocMinder CreatePlayer /LOG:"${{ env.ROBOCOPY_LOG_FOLDER }}\CW1.txt"
                
                $EXIT_CODE = $LASTEXITCODE
                if ($EXIT_CODE -le 3) {
                  echo "Robocopy completed with exit code $EXIT_CODE (Success or minor issues)."
                  exit 0 # Force a successful exit for GitHub Actions 
                }
                else {
                  echo "Robocopy failed with exit code $EXIT_CODE." 
                  exit $EXIT_CODE 
                }

            - name: Run EDMS Test pages Robocopy for Production 
              if: success() && env.REPO_NAME == 'CW.ComplianceWire-1.0' && github.event.inputs.environment == 'Production' 
              run: | 
                echo "Running EDMS Test pages robocopy for Production environment..." 
                robocopy "\\cwstaging01\Builds\RoboCopy\NewProd\EDMSTestPages" "\\${{ vars.WEB_SERVER }}\EduNeering\ComplianceWire\Posts" /E /MT:16 /LOG:"${{ env.ROBOCOPY_LOG_FOLDER }}\EDMSTestPages.txt"
                
                $EXIT_CODE = $LASTEXITCODE
                if ( $EXIT_CODE -le 3 ){
                  echo "Robocopy completed with exit code $EXIT_CODE (Success or minor issues)."
                  exit 0 # Force a successful exit for GitHub Actions 
                }
                else {
                  echo "Robocopy failed with exit code $EXIT_CODE." 
                  exit $EXIT_CODE 
                }

            # CWLearner
            - name: Build and Deploy CW.Learner
              if: ${{ env.REPO_NAME == 'CW.Learner' }}
              run: |
                cd ${{ env.REPO_NAME }}
                dotnet build CWLearner\CWLearner.csproj --configuration Release --output ${{ env.OUTPUT_DIRECTORY }}
                dotnet publish CWLearner\CWLearner.csproj --configuration Release --output ${{ env.OUTPUT_DIRECTORY }}\publish
                
                robocopy "${{ env.OUTPUT_DIRECTORY }}\publish" "\\${{ vars.WEB_SERVER }}\Eduneering\CWLearner" /MIR /MT:16 /LOG:"${{ env.ROBOCOPY_LOG_FOLDER }}\CWLearner.txt"

                $EXIT_CODE = $LASTEXITCODE
                if ( $EXIT_CODE -le 3 ){
                  echo "Robocopy completed with exit code $EXIT_CODE (Success or minor issues)."
                  exit 0 # Force a successful exit for GitHub Actions 
                }
                else {
                  echo "Robocopy failed with exit code $EXIT_CODE." 
                  exit $EXIT_CODE 
                }                

            # CWWebApi 
            - name: Build and Deploy CWWebApi 
              if: ${{ github.event.inputs.repo_name == 'CW.CWWebApi' }}
              run: |
                echo "Building solution: ${{ github.event.inputs.repo_name }}\${{ env.SOLUTION_NAME}}"
                msbuild ${{ env.REPO_NAME }}\${{ env.SOLUTION_NAME }} /p:Configuration=${{ vars.CONFIGURATION }} /p:Platform="${{ env.PLATFORM }}" /p:MsDeployServiceUrl=${{ vars.MT_SERVER }}.alpha.eduh.co:8172/msdeploy.axd /p:DeployOnBuild=True /p:IsAutoBuild=True /p:DeployTarget=MsDeployPublish  /p:CreatePackageOnPublish=True /p:AllowUntrustedCertificate=True /p:username="${{ vars.DEPLOY_USER }}" /p:password="${{ secrets.DEPLOY_PASSWORD }}" /p:OutDir="${{ env.OUTPUT_DIRECTORY }}"
            
            # CWWebApi - Router 
            - name: Build and Deploy CWWebApi - Router
              if: ${{ github.event.inputs.repo_name == 'CW.CWWebApi-Router' }}
              run: |
                echo "Building solution: ${{ github.event.inputs.repo_name }}\${{ env.SOLUTION_NAME}}"
                msbuild ${{ env.REPO_NAME }}\${{ env.SOLUTION_NAME }} /p:Configuration=${{ vars.WEBAPI_ROUTER }} /p:Platform="${{ env.PLATFORM }}" /p:MsDeployServiceUrl=${{ vars.WEB_SERVER }}.alpha.eduh.co:8172/msdeploy.axd /p:DeployOnBuild=True /p:IsAutoBuild=True /p:DeployTarget=MsDeployPublish  /p:CreatePackageOnPublish=True /p:AllowUntrustedCertificate=True /p:username="${{ vars.DEPLOY_USER }}" /p:password="${{ secrets.DEPLOY_PASSWORD }}" /p:OutDir="${{ env.OUTPUT_DIRECTORY }}"
                echo "Configuration - ${{ vars.WEBAPI_ROUTER }}"

            # Hyperion
            - name: Build and Deploy Hyperion 
              if: ${{ env.REPO_NAME == 'CW.Hyperion' }}
              run: |
                echo "Building solution: ${{ env.REPO_NAME }}\${{ env.SOLUTION_NAME}}"
                msbuild ${{ env.REPO_NAME }}\${{ env.SOLUTION_NAME }} /p:Configuration=${{ vars.CONFIGURATION }} /p:Platform="${{ env.PLATFORM }}" /p:MsDeployServiceUrl=${{ vars.WEB_SERVER }}.alpha.eduh.co:8172/msdeploy.axd /p:DeployIisAppPath="ComplianceWire/Configuration" /p:DeployOnBuild=True /p:IsAutoBuild=True /p:DeployTarget=MsDeployPublish /p:CreatePackageOnPublish=True /p:AllowUntrustedCertificate=True /p:username="${{ vars.DEPLOY_USER }}" /p:password="${{ secrets.DEPLOY_PASSWORD }}" /p:OutDir="${{ env.OUTPUT_DIRECTORY }}"

            # CWAdmin
            - name: Build and Deploy CW.Admin 
              if: ${{ env.REPO_NAME == 'CW.Admin' }}
              run: |
                cd ${{ env.REPO_NAME }}
                dotnet build CWAdmin\CWAdmin.csproj --configuration Release --output ${{ env.OUTPUT_DIRECTORY}}
                dotnet publish CWAdmin\CWAdmin.csproj --configuration Release --output ${{ env.OUTPUT_DIRECTORY }}\publish
                
                robocopy "${{ env.OUTPUT_DIRECTORY }}\publish" "\\${{ vars.WEB_SERVER }}\Eduneering\CWAdmin" /MIR /MT:16 /LOG:"${{ env.ROBOCOPY_LOG_FOLDER }}\CWAdmin.txt"
                
                $EXIT_CODE = $LASTEXITCODE
                if ( $EXIT_CODE -le 3 ){
                  echo "Robocopy completed with exit code $EXIT_CODE (Success or minor issues)."
                  exit 0 # Force a successful exit for GitHub Actions 
                }
                else {
                  echo "Robocopy failed with exit code $EXIT_CODE." 
                  exit $EXIT_CODE 
                }                
            
            # PSTools
            - name: Build and Deploy PSTools 
              if: ${{ env.REPO_NAME == 'CW.PSTools' }}
              run: |
                echo "Building solution: ${{ env.REPO_NAME }}\${{ env.SOLUTION_NAME}}"
                msbuild ${{ env.REPO_NAME }}\${{ env.SOLUTION_NAME }} /p:Configuration=${{ vars.CONFIGURATION }} /p:Platform="${{ env.PLATFORM }}" /p:MsDeployServiceUrl=${{ vars.WEB_SERVER }}.alpha.eduh.co:8172/msdeploy.axd /p:DeployIisAppPath="PSStudio" /p:DeployOnBuild=True /p:IsAutoBuild=True /p:DeployTarget=MsDeployPublish /p:CreatePackageOnPublish=True /p:AllowUntrustedCertificate=True /p:username="${{ vars.DEPLOY_USER }}" /p:password="${{ secrets.DEPLOY_PASSWORD }}" /p:OutDir="${{ env.OUTPUT_DIRECTORY }}"

            # ReportEngine
            - name: Build and Deploy ReportEngine 
              if: ${{ env.REPO_NAME == 'CW.ReportEngine' }}
              run: |
                echo "Building solution: ${{ env.REPO_NAME }}\${{ env.SOLUTION_NAME}}"
                msbuild ${{ env.REPO_NAME }}\${{ env.SOLUTION_NAME }} /p:Configuration=${{ vars.CONFIGURATION }} /p:Platform="${{ env.PLATFORM }}" /p:MsDeployServiceUrl=${{ vars.WEB_SERVER }}.alpha.eduh.co:8172/msdeploy.axd /p:DeployIisAppPath="ComplianceWire/ReportEngine" /p:DeployOnBuild=True /p:IsAutoBuild=True /p:DeployTarget=MsDeployPublish /p:CreatePackageOnPublish=True /p:AllowUntrustedCertificate=True /p:username="${{ vars.DEPLOY_USER }}" /p:password="${{ secrets.DEPLOY_PASSWORD }}" /p:OutDir="${{ env.OUTPUT_DIRECTORY }}"

            # Zeus 
            - name: Build and Deploy Zeus 
              if: ${{ env.REPO_NAME == 'CW.Zeus' }}
              run: |
                echo "Building solution: ${{ env.REPO_NAME }}\${{ env.SOLUTION_NAME}}"
                msbuild ${{ env.REPO_NAME }}\${{ env.SOLUTION_NAME }} /p:Configuration=${{ vars.CONFIGURATION }} /p:Platform="${{ env.PLATFORM_NOSPACE }}" /p:MsDeployServiceUrl=${{ vars.MT_SERVER }}.alpha.eduh.co:8172/msdeploy.axd /p:DeployOnBuild=True /p:IsAutoBuild=True /p:DeployTarget=MsDeployPublish /p:CreatePackageOnPublish=True /p:AllowUntrustedCertificate=True /p:username="${{ vars.DEPLOY_USER }}" /p:password="${{ secrets.DEPLOY_PASSWORD }}" /p:OutDir="${{ env.OUTPUT_DIRECTORY }}"
    # Generate Deployment Summary and Append to Job Summary
    Deployment_Logs:
        runs-on: ${{ needs.Get_Self_Hosted_Runner.outputs.RUNNER_NAME }}
        if: ${{ always() }} # Ensure this job runs even if previous jobs fail
        environment: ${{ github.event.inputs.environment }}
        needs: [Get_Self_Hosted_Runner, Checkout_Target_Repo, NuGet_Restore, Build_Solution]
        steps:
            - name: Generate Deployment Summary 
              if: ${{ always() }} # Ensure this step runs even if previous steps fail
              shell: powershell
              run: | 
                $summaryFile = "${{ github.workspace }}/deployment_summary.md"
                "### :rocket: Deployment Summary" | Out-File -FilePath $summaryFile -Encoding utf8 -Append
                "- **Repository:** ${{ github.event.inputs.repo_name }}" | Out-File -FilePath $summaryFile -Encoding utf8 -Append
                "- **Branch:** ${{ vars.BRANCH }}" | Out-File -FilePath $summaryFile -Encoding utf8 -Append
                "- **Configuration:** ${{ 
                  github.event.inputs.repo_name == 'CW.Chronos-Admin' && vars.CHRONOS_ADMIN || 
                  github.event.inputs.repo_name == 'CW.CWWebApi-Router' && vars.WEBAPI_ROUTER || 
                  vars.CONFIGURATION 
                }}" | Out-File -FilePath $summaryFile -Encoding utf8 -Append
                "- **Environment:** ${{ github.event.inputs.environment }}" | Out-File -FilePath $summaryFile -Encoding utf8 -Append
                "- **Commit ID:** ${{ needs.Checkout_Target_Repo.outputs.COMMIT_ID }}" | Out-File -FilePath $summaryFile -Encoding utf8 -Append
                "- **Commit Message:** ${{ needs.Checkout_Target_Repo.outputs.COMMIT_MESSAGE }}" | Out-File -FilePath $summaryFile -Encoding utf8 -Append
                if ("${{ github.event.inputs.environment }}" -eq "Production") {
                  "- **Build Number:** ${{ vars.BUILD_NUMBER }}" | Out-File -FilePath $summaryFile -Encoding utf8 -Append
                }
  
            - name: Append Deployment Summary to Job Summary
              if: ${{ always() }} # Ensure this step runs even if previous steps fail
              run: |
                $summaryFile = "${{ github.workspace }}/deployment_summary.md"
                $content = Get-Content $summaryFile
                $content | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
              
            - name: Print Deployment Summary 
              if: ${{ always() }} # Ensure this step runs even if previous steps fail
              run: Get-Content ${{ github.workspace }}/deployment_summary.md
    # Clean up resources after deployment
    Clean_Up:
        runs-on: ${{ needs.Get_Self_Hosted_Runner.outputs.RUNNER_NAME }}
        if: ${{ always() }} # Ensure this job runs even if previous jobs fail
        needs: [Get_Self_Hosted_Runner, Checkout_Target_Repo, NuGet_Restore, Build_Solution, Deployment_Logs]
        steps:
            # Clean up resources
            - name: Clean up resources
              run: |
                cd ${{ env.WORKSPACE_DIRECTORY }}
                Remove-Item -Recurse -Force ${{ env.REPO_NAME }}
                # Remove deployment summary file 
                Remove-Item -Path "deployment_summary.md" -Recurse -Force
                echo "All resources cleaned up successfully."