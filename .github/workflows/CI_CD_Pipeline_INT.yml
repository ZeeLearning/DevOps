# This workflows triggers the build/deploy workflow for every repository. 

name: CI/CD Pipeline INT 

on: 
  workflow_dispatch: 
    inputs: 
      environment: 
        description: 'Environment' 
        required: true 
        type: choice 
        options: 
          - 'INT'

jobs:
    # Trigger Build/Deploy for Aphrodite
    Aphrodite:
        runs-on: self-hosted
        outputs:
            BUILD_STATUS_APHRODITE: ${{ steps.get_build_status_aphrodite.outputs.buildStatusAphrodite }}
        steps:
            - name: Trigger Build and Deploy Workflow for Aphrodite
              uses: actions/github-script@v7
              with:
                script: |
                  const response = await github.rest.actions.createWorkflowDispatch({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    workflow_id: 'Build_Deploy_Env_GitHub.yml',
                    ref: 'main',
                    inputs: {
                      repo_name: 'CW.Aphrodite',
                      environment: '${{ github.event.inputs.environment }}'
                    }
                  });
                  console.log(response);
            
            - name: Capture Build Status for Aphrodite
              id: get_build_status_aphrodite 
              run: |
                $buildStatusAphrodite = '${{ job.status}}'
                echo "Build Status for Aphrodite: $buildStatusAphrodite"
                echo "buildStatusAphrodite=$buildStatusAphrodite" >> $env:GITHUB_OUTPUT 

    # Trigger Build/Deploy for Apollo 
    Apollo:
        runs-on: self-hosted
        needs: Aphrodite
        outputs:
            BUILD_STATUS_APOLLO: ${{ steps.get_build_status_apollo.outputs.buildStatusApollo }}
        if: always() # Ensure this job runs even if the previous job fails
        steps:
            - name: Trigger Build and Deploy Workflow for Apollo
              uses: actions/github-script@v7
              with:
                script: |
                  const response = await github.rest.actions.createWorkflowDispatch({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    workflow_id: 'Build_Deploy_Env_GitHub.yml',
                    ref: 'main',
                    inputs: {
                      repo_name: 'CW.Apollo',
                      environment: '${{ github.event.inputs.environment }}'
                    }
                  });
                  console.log(response);
            
            - name: Capture Build Status for Apollo
              id: get_build_status_apollo 
              run: |
                $buildStatusApollo = '${{ job.status}}'
                echo "Build Status for Apollo: $buildStatusApollo"
                echo "buildStatusApollo=$buildStatusApollo" >> $env:GITHUB_OUTPUT

    # Trigger Build/Deploy for Athena 
    Athena: 
        runs-on: self-hosted
        needs: [Aphrodite, Apollo] # Ensure this job runs after all previous jobs
        if: always() # Ensure this job runs even if the previous jobs fail
        outputs:
            BUILD_STATUS_ATHENA: ${{ steps.get_build_status_athena.outputs.buildStatusAthena }}
        steps:
            - name: Trigger Build and Deploy Workflow for Athena
              uses: actions/github-script@v7
              with:
                script: |
                  const response = await github.rest.actions.createWorkflowDispatch({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    workflow_id: 'Build_Deploy_Env_GitHub.yml',
                    ref: 'main',
                    inputs: {
                      repo_name: 'CW.Athena',
                      environment: '${{ github.event.inputs.environment }}'
                    }
                  });
                  console.log(response);
            
            - name: Capture Build Status for Athena
              id: get_build_status_athena 
              run: |
                $buildStatusAthena = '${{ job.status}}'
                echo "Build Status for Athena: $buildStatusAthena"
                echo "buildStatusAthena=$buildStatusAthena" >> $env:GITHUB_OUTPUT

    # Trigger Build/Deploy for Chronos.Admin 
    Chronos_Admin:
        runs-on: self-hosted
        needs: [Aphrodite, Apollo, Athena] # Ensure this job runs after all previous jobs
        if: always() # Ensure this job runs even if the previous jobs fail
        outputs:
            BUILD_STATUS_CHRONOS_ADMIN: ${{ steps.get_build_status_chronos_admin.outputs.buildStatusChronosAdmin }}
        steps:
            - name: Trigger Build and Deploy Workflow for Chronos.Admin
              uses: actions/github-script@v7
              with:
                script: |
                  const response = await github.rest.actions.createWorkflowDispatch({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    workflow_id: 'Build_Deploy_Env_GitHub.yml',
                    ref: 'main',
                    inputs: {
                      repo_name: 'CW.Chronos-Admin',
                      environment: '${{ github.event.inputs.environment }}'
                    }
                  });
                  console.log(response);
            
            - name: Capture Build Status for Chronos.Admin
              id: get_build_status_chronos_admin 
              run: |
                $buildStatusChronosAdmin = '${{ job.status}}'
                echo "Build Status for Chronos.Admin: $buildStatusChronosAdmin"
                echo "buildStatusChronosAdmin=$buildStatusChronosAdmin" >> $env:GITHUB_OUTPUT

    # Trigger Build/Deploy for Chronos.CW2 
    Chronos_CW2:
        runs-on: self-hosted
        needs: [Aphrodite, Apollo, Athena, Chronos_Admin] # Ensure this job runs after all previous jobs
        if: always() # Ensure this job runs even if the previous jobs fail
        outputs:
            BUILD_STATUS_CHRONOS_CW2: ${{ steps.get_build_status_chronos_cw2.outputs.buildStatusChronosCW2 }}
        steps:
            - name: Trigger Build and Deploy Workflow for Chronos.CW2
              uses: actions/github-script@v7
              with:
                script: |
                  const response = await github.rest.actions.createWorkflowDispatch({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    workflow_id: 'Build_Deploy_Env_GitHub.yml',
                    ref: 'main',
                    inputs: {
                      repo_name: 'CW.Chronos',
                      environment: '${{ github.event.inputs.environment }}'
                    }
                  });
                  console.log(response);
            
            - name: Capture Build Status for Chronos.CW2
              id: get_build_status_chronos_cw2 
              run: |
                $buildStatusChronosCW2 = '${{ job.status}}'
                echo "Build Status for Chronos.CW2: $buildStatusChronosCW2"
                echo "buildStatusChronosCW2=$buildStatusChronosCW2" >> $env:GITHUB_OUTPUT

    # Trigger Build/Deploy for ClientWebREST_API
    ClientWebREST_API:
        runs-on: self-hosted
        needs: [Aphrodite, Apollo, Athena, Chronos_Admin, Chronos_CW2] # Ensure this job runs after all previous jobs
        if: always() # Ensure this job runs even if the previous jobs fail
        outputs:
            BUILD_STATUS_CLIENTWEBREST_API: ${{ steps.get_build_status_clientwebrest_api.outputs.buildStatusClientWebREST_API }}
        steps:
            - name: Trigger Build and Deploy Workflow for ClientWebREST_API
              uses: actions/github-script@v7
              with:
                script: |
                  const response = await github.rest.actions.createWorkflowDispatch({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    workflow_id: 'Build_Deploy_Env_GitHub.yml',
                    ref: 'main',
                    inputs: {
                      repo_name: 'CW.ClientWebREST_API',
                      environment: '${{ github.event.inputs.environment }}'
                    }
                  });
                  console.log(response);
            
            - name: Capture Build Status for ClientWebREST_API
              id: get_build_status_clientwebrest_api 
              run: |
                $buildStatusClientWebREST_API = '${{ job.status}}'
                echo "Build Status for ClientWebREST_API: $buildStatusClientWebREST_API"
                echo "buildStatusClientWebREST_API=$buildStatusClientWebREST_API" >> $env:GITHUB_OUTPUT 
    
    # Trigger Build/Deploy for ComplianceWire 1.0 
    ComplianceWire_1_0:
        runs-on: self-hosted
        needs: [Aphrodite, Apollo, Athena, Chronos_Admin, Chronos_CW2, ClientWebREST_API] # Ensure this job runs after all previous jobs
        if: always() # Ensure this job runs even if the previous jobs fail
        outputs:
            BUILD_STATUS_COMPLIANCEWIRE_1_0: ${{ steps.get_build_status_compliancewire_1_0.outputs.buildStatusComplianceWire1_0 }}
        steps:
            - name: Trigger Build and Deploy Workflow for ComplianceWire 1.0
              uses: actions/github-script@v7
              with:
                script: |
                  const response = await github.rest.actions.createWorkflowDispatch({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    workflow_id: 'Build_Deploy_Env_GitHub.yml',
                    ref: 'main',
                    inputs: {
                      repo_name: 'CW.ComplianceWire-1.0',
                      environment: '${{ github.event.inputs.environment }}'
                    }
                  });
                  console.log(response);
            
            - name: Capture Build Status for ComplianceWire 1.0
              id: get_build_status_compliancewire_1_0 
              run: |
                $buildStatusComplianceWire1_0 = '${{ job.status}}'
                echo "Build Status for ComplianceWire 1.0: $buildStatusComplianceWire1_0"
                echo "buildStatusComplianceWire1_0=$buildStatusComplianceWire1_0" >> $env:GITHUB_OUTPUT
    
    # Trigger Build/Deploy for CWAdmin 
    CWAdmin:
        runs-on: self-hosted
        needs: [Aphrodite, Apollo, Athena, Chronos_Admin, Chronos_CW2, ClientWebREST_API, ComplianceWire_1_0] # Ensure this job runs after all previous jobs
        if: always() # Ensure this job runs even if the previous jobs fail
        outputs:
            BUILD_STATUS_CWADMIN: ${{ steps.get_build_status_cwadmin.outputs.buildStatusCWAdmin }}
        steps:
            - name: Trigger Build and Deploy Workflow for CWAdmin
              uses: actions/github-script@v7
              with:
                script: |
                  const response = await github.rest.actions.createWorkflowDispatch({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    workflow_id: 'Build_Deploy_Env_GitHub.yml',
                    ref: 'main',
                    inputs: {
                      repo_name: 'CW.Admin',
                      environment: '${{ github.event.inputs.environment }}'
                    }
                  });
                  console.log(response);
            
            - name: Capture Build Status for CWAdmin
              id: get_build_status_cwadmin 
              run: |
                $buildStatusCWAdmin = '${{ job.status}}'
                echo "Build Status for CWAdmin: $buildStatusCWAdmin"
                echo "buildStatusCWAdmin=$buildStatusCWAdmin" >> $env:GITHUB_OUTPUT

    # Trigger Build/Deploy for CWLearner 
    CWLearner:
        runs-on: self-hosted
        needs: [Aphrodite, Apollo, Athena, Chronos_Admin, Chronos_CW2, ClientWebREST_API, ComplianceWire_1_0, CWAdmin] # Ensure this job runs after all previous jobs
        if: always() # Ensure this job runs even if the previous jobs fail
        outputs:
            BUILD_STATUS_CWLEARNER: ${{ steps.get_build_status_cwlearner.outputs.buildStatusCWLearner }}
        steps:
            - name: Trigger Build and Deploy Workflow for CWLearner
              uses: actions/github-script@v7
              with:
                script: |
                  const response = await github.rest.actions.createWorkflowDispatch({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    workflow_id: 'Build_Deploy_Env_GitHub.yml',
                    ref: 'main',
                    inputs: {
                      repo_name: 'CW.Learner',
                      environment: '${{ github.event.inputs.environment }}'
                    }
                  });
                  console.log(response);
            
            - name: Capture Build Status for CWLearner
              id: get_build_status_cwlearner 
              run: |
                $buildStatusCWLearner = '${{ job.status}}'
                echo "Build Status for CWLearner: $buildStatusCWLearner"
                echo "buildStatusCWLearner=$buildStatusCWLearner" >> $env:GITHUB_OUTPUT

    # Trigger Build/Deploy for CWWebApi 
    CWWebApi:
        runs-on: self-hosted
        needs: [Aphrodite, Apollo, Athena, Chronos_Admin, Chronos_CW2, ClientWebREST_API, ComplianceWire_1_0, CWAdmin, CWLearner] # Ensure this job runs after all previous jobs
        if: always() # Ensure this job runs even if the previous jobs fail
        outputs:
            BUILD_STATUS_CWWEBAPI: ${{ steps.get_build_status_cwwebapi.outputs.buildStatusCWWebApi }}
        steps:
            - name: Trigger Build and Deploy Workflow for CWWebApi
              uses: actions/github-script@v7
              with:
                script: |
                  const response = await github.rest.actions.createWorkflowDispatch({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    workflow_id: 'Build_Deploy_Env_GitHub.yml',
                    ref: 'main',
                    inputs: {
                      repo_name: 'CW.CWWebApi',
                      environment: '${{ github.event.inputs.environment }}'
                    }
                  });
                  console.log(response);
            
            - name: Capture Build Status for CWWebApi
              id: get_build_status_cwwebapi 
              run: |
                $buildStatusCWWebApi = '${{ job.status}}'
                echo "Build Status for CWWebApi: $buildStatusCWWebApi"
                echo "buildStatusCWWebApi=$buildStatusCWWebApi" >> $env:GITHUB_OUTPUT

    # Trigger Build/Deploy for CWWebApi Router 
    CWWebApi_Router:
        runs-on: self-hosted
        needs: [Aphrodite, Apollo, Athena, Chronos_Admin, Chronos_CW2, ClientWebREST_API, ComplianceWire_1_0, CWAdmin, CWLearner, CWWebApi] # Ensure this job runs after all previous jobs
        if: always() # Ensure this job runs even if the previous jobs fail
        outputs:
            BUILD_STATUS_CWWEBAPI_ROUTER: ${{ steps.get_build_status_cwwebapi_router.outputs.buildStatusCWWebApiRouter }}
        steps:
            - name: Trigger Build and Deploy Workflow for CWWebApi Router
              uses: actions/github-script@v7
              with:
                script: |
                  const response = await github.rest.actions.createWorkflowDispatch({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    workflow_id: 'Build_Deploy_Env_GitHub.yml',
                    ref: 'main',
                    inputs: {
                      repo_name: 'CW.CWWebApi-Router',
                      environment: '${{ github.event.inputs.environment }}'
                    }
                  });
                  console.log(response);
            
            - name: Capture Build Status for CWWebApi Router
              id: get_build_status_cwwebapi_router 
              run: |
                $buildStatusCWWebApiRouter = '${{ job.status}}'
                echo "Build Status for CWWebApi Router: $buildStatusCWWebApiRouter"
                echo "buildStatusCWWebApiRouter=$buildStatusCWWebApiRouter" >> $env:GITHUB_OUTPUT

    # Trigger Build/Deploy for Hyperion 
    Hyperion:
        runs-on: self-hosted
        needs: [Aphrodite, Apollo, Athena, Chronos_Admin, Chronos_CW2, ClientWebREST_API, ComplianceWire_1_0, CWAdmin, CWLearner, CWWebApi, CWWebApi_Router] # Ensure this job runs after all previous jobs
        if: always() # Ensure this job runs even if the previous jobs fail
        outputs:
            BUILD_STATUS_HYPERION: ${{ steps.get_build_status_hyperion.outputs.buildStatusHyperion }}
        steps:
            - name: Trigger Build and Deploy Workflow for Hyperion
              uses: actions/github-script@v7
              with:
                script: |
                  const response = await github.rest.actions.createWorkflowDispatch({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    workflow_id: 'Build_Deploy_Env_GitHub.yml',
                    ref: 'main',
                    inputs: {
                      repo_name: 'CW.Hyperion',
                      environment: '${{ github.event.inputs.environment }}'
                    }
                  });
                  console.log(response);
            
            - name: Capture Build Status for Hyperion
              id: get_build_status_hyperion 
              run: |
                $buildStatusHyperion = '${{ job.status}}'
                echo "Build Status for Hyperion: $buildStatusHyperion"
                echo "buildStatusHyperion=$buildStatusHyperion" >> $env:GITHUB_OUTPUT

    # Trigger Build/Deploy for PSTools 
    PSTools:
        runs-on: self-hosted
        needs: [Aphrodite, Apollo, Athena, Chronos_Admin, Chronos_CW2, ClientWebREST_API, ComplianceWire_1_0, CWAdmin, CWLearner, CWWebApi, CWWebApi_Router, Hyperion] # Ensure this job runs after all previous jobs
        if: always() # Ensure this job runs even if the previous jobs fail
        outputs:
            BUILD_STATUS_PSTOOLS: ${{ steps.get_build_status_pstools.outputs.buildStatusPSTools }}
        steps:
            - name: Trigger Build and Deploy Workflow for PSTools
              uses: actions/github-script@v7
              with:
                script: |
                  const response = await github.rest.actions.createWorkflowDispatch({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    workflow_id: 'Build_Deploy_Env_GitHub.yml',
                    ref: 'main',
                    inputs: {
                      repo_name: 'CW.PSTools',
                      environment: '${{ github.event.inputs.environment }}'
                    }
                  });
                  console.log(response);
            
            - name: Capture Build Status for PSTools
              id: get_build_status_pstools 
              run: |
                $buildStatusPSTools = '${{ job.status}}'
                echo "Build Status for PSTools: $buildStatusPSTools"
                echo "buildStatusPSTools=$buildStatusPSTools" >> $env:GITHUB_OUTPUT

    # Trigger Build/Deploy for ReportEngine
    ReportEngine:
        runs-on: self-hosted
        needs: [Aphrodite, Apollo, Athena, Chronos_Admin, Chronos_CW2, ClientWebREST_API, ComplianceWire_1_0, CWAdmin, CWLearner, CWWebApi, CWWebApi_Router, Hyperion, PSTools] # Ensure this job runs after all previous jobs
        if: always() # Ensure this job runs even if the previous jobs fail
        outputs:
            BUILD_STATUS_REPORTENGINE: ${{ steps.get_build_status_reportengine.outputs.buildStatusReportEngine }}
        steps:
            - name: Trigger Build and Deploy Workflow for ReportEngine
              uses: actions/github-script@v7
              with:
                script: |
                  const response = await github.rest.actions.createWorkflowDispatch({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    workflow_id: 'Build_Deploy_Env_GitHub.yml',
                    ref: 'main',
                    inputs: {
                      repo_name: 'CW.ReportEngine',
                      environment: '${{ github.event.inputs.environment }}'
                    }
                  });
                  console.log(response);
            
            - name: Capture Build Status for ReportEngine
              id: get_build_status_reportengine 
              run: |
                $buildStatusReportEngine = '${{ job.status}}'
                echo "Build Status for ReportEngine: $buildStatusReportEngine"
                echo "buildStatusReportEngine=$buildStatusReportEngine" >> $env:GITHUB_OUTPUT
    
    # Trigger Build/Deploy for Zeus 
    Zeus:
        runs-on: self-hosted
        needs: [Aphrodite, Apollo, Athena, Chronos_Admin, Chronos_CW2, ClientWebREST_API, ComplianceWire_1_0, CWAdmin, CWLearner, CWWebApi, CWWebApi_Router, Hyperion, PSTools, ReportEngine] # Ensure this job runs after all previous jobs
        if: always() # Ensure this job runs even if the previous jobs fail
        outputs:
            BUILD_STATUS_ZEUS: ${{ steps.get_build_status_zeus.outputs.buildStatusZeus }}
        steps:
            - name: Trigger Build and Deploy Workflow for Zeus
              uses: actions/github-script@v7
              with:
                script: |
                  const response = await github.rest.actions.createWorkflowDispatch({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    workflow_id: 'Build_Deploy_Env_GitHub.yml',
                    ref: 'main',
                    inputs: {
                      repo_name: 'CW.Zeus',
                      environment: '${{ github.event.inputs.environment }}'
                    }
                  });
                  console.log(response);
            
            - name: Capture Build Status for Zeus
              id: get_build_status_zeus 
              run: |
                $buildStatusZeus = '${{ job.status}}'
                echo "Build Status for Zeus: $buildStatusZeus"
                echo "buildStatusZeus=$buildStatusZeus" >> $env:GITHUB_OUTPUT

    # Aggregate Build Statuses 
    Aggregate_Build_Statuses:
        runs-on: self-hosted
        needs: [Aphrodite, Apollo, Athena, Chronos_Admin, Chronos_CW2, ClientWebREST_API, ComplianceWire_1_0, CWAdmin, CWLearner, CWWebApi, CWWebApi_Router, Hyperion, PSTools, ReportEngine, Zeus] # Ensure this job runs after all previous jobs
        if: always() # Ensure this job runs even if previous jobs fail
        steps:
            - name: Aggregate Build Statuses
              run: |
                echo "Aphrodite Build Status: ${{ needs.Aphrodite.outputs.BUILD_STATUS_APHRODITE }}"
                echo "ClientWebREST_API Build Status: ${{ needs.ClientWebREST_API.outputs.BUILD_STATUS_CLIENTWEBREST_API }}"
                # You can add logic here to handle the aggregated statuses as needed.